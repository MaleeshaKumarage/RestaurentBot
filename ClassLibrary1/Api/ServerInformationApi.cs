/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ApiClient.Client;
using ApiClient.Model;

namespace ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerInformationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Health endpoint of Rasa Server
        /// </summary>
        /// <remarks>
        /// This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string RootGet();

        /// <summary>
        /// Health endpoint of Rasa Server
        /// </summary>
        /// <remarks>
        /// This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RootGetWithHttpInfo();
        /// <summary>
        /// Status of the currently loaded Rasa model
        /// </summary>
        /// <remarks>
        /// Information about the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 StatusGet();

        /// <summary>
        /// Status of the currently loaded Rasa model
        /// </summary>
        /// <remarks>
        /// Information about the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> StatusGetWithHttpInfo();
        /// <summary>
        /// Version of Rasa
        /// </summary>
        /// <remarks>
        /// Returns the version of Rasa.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 VersionGet();

        /// <summary>
        /// Version of Rasa
        /// </summary>
        /// <remarks>
        /// Returns the version of Rasa.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> VersionGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerInformationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Health endpoint of Rasa Server
        /// </summary>
        /// <remarks>
        /// This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RootGetAsync();

        /// <summary>
        /// Health endpoint of Rasa Server
        /// </summary>
        /// <remarks>
        /// This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RootGetAsyncWithHttpInfo();
        /// <summary>
        /// Status of the currently loaded Rasa model
        /// </summary>
        /// <remarks>
        /// Information about the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> StatusGetAsync();

        /// <summary>
        /// Status of the currently loaded Rasa model
        /// </summary>
        /// <remarks>
        /// Information about the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> StatusGetAsyncWithHttpInfo();
        /// <summary>
        /// Version of Rasa
        /// </summary>
        /// <remarks>
        /// Returns the version of Rasa.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> VersionGetAsync();

        /// <summary>
        /// Version of Rasa
        /// </summary>
        /// <remarks>
        /// Returns the version of Rasa.
        /// </remarks>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> VersionGetAsyncWithHttpInfo();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerInformationApi : IServerInformationApiSync, IServerInformationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServerInformationApi : IServerInformationApi
    {
        private ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerInformationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerInformationApi(String basePath)
        {
            this.Configuration = ApiClient.Client.Configuration.MergeConfigurations(
                ApiClient.Client.GlobalConfiguration.Instance,
                new ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInformationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServerInformationApi(ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApiClient.Client.Configuration.MergeConfigurations(
                ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInformationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServerInformationApi(ApiClient.Client.ISynchronousClient client, ApiClient.Client.IAsynchronousClient asyncClient, ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Health endpoint of Rasa Server This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string RootGet()
        {
            ApiClient.Client.ApiResponse<string> localVarResponse = RootGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health endpoint of Rasa Server This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiClient.Client.ApiResponse<string> RootGetWithHttpInfo()
        {
            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get<string>("/", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RootGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Health endpoint of Rasa Server This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RootGetAsync()
        {
            ApiClient.Client.ApiResponse<string> localVarResponse = await RootGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Health endpoint of Rasa Server This URL can be used as an endpoint to run health checks against. When the server is running this will return 200.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiClient.Client.ApiResponse<string>> RootGetAsyncWithHttpInfo()
        {

            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);



            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<string>("/", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RootGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Status of the currently loaded Rasa model Information about the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 StatusGet()
        {
            ApiClient.Client.ApiResponse<InlineResponse2001> localVarResponse = StatusGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Status of the currently loaded Rasa model Information about the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiClient.Client.ApiResponse<InlineResponse2001> StatusGetWithHttpInfo()
        {
            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get<InlineResponse2001>("/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("StatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Status of the currently loaded Rasa model Information about the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> StatusGetAsync()
        {
            ApiClient.Client.ApiResponse<InlineResponse2001> localVarResponse = await StatusGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Status of the currently loaded Rasa model Information about the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiClient.Client.ApiResponse<InlineResponse2001>> StatusGetAsyncWithHttpInfo()
        {

            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("StatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Version of Rasa Returns the version of Rasa.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 VersionGet()
        {
            ApiClient.Client.ApiResponse<InlineResponse200> localVarResponse = VersionGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version of Rasa Returns the version of Rasa.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiClient.Client.ApiResponse<InlineResponse200> VersionGetWithHttpInfo()
        {
            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get<InlineResponse200>("/version", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("VersionGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Version of Rasa Returns the version of Rasa.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> VersionGetAsync()
        {
            ApiClient.Client.ApiResponse<InlineResponse200> localVarResponse = await VersionGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Version of Rasa Returns the version of Rasa.
        /// </summary>
        /// <exception cref="ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiClient.Client.ApiResponse<InlineResponse200>> VersionGetAsyncWithHttpInfo()
        {

            ApiClient.Client.RequestOptions requestOptions = new ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);



            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse200>("/version", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("VersionGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
