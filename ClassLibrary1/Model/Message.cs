/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// Message
    /// </summary>
    [DataContract]
    public partial class Message : IEquatable<Message>, IValidatableObject
    {
        /// <summary>
        /// Origin of the message - who sent it
        /// </summary>
        /// <value>Origin of the message - who sent it</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SenderEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1

        }

        /// <summary>
        /// Origin of the message - who sent it
        /// </summary>
        /// <value>Origin of the message - who sent it</value>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public SenderEnum Sender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Message() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="text">Message text (required).</param>
        /// <param name="sender">Origin of the message - who sent it (required).</param>
        /// <param name="parseData">parseData.</param>
        public Message(string text = default(string), SenderEnum sender = default(SenderEnum), ParseResult parseData = default(ParseResult))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for Message and cannot be null");
            }
            else
            {
                this.Text = text;
            }

            this.Sender = sender;
            this.ParseData = parseData;
        }

        /// <summary>
        /// Message text
        /// </summary>
        /// <value>Message text</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets ParseData
        /// </summary>
        [DataMember(Name = "parse_data", EmitDefaultValue = false)]
        public ParseResult ParseData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ParseData: ").Append(ParseData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Message);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="input">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) &&
                (
                    this.Sender == input.Sender ||
                    this.Sender.Equals(input.Sender)
                ) &&
                (
                    this.ParseData == input.ParseData ||
                    (this.ParseData != null &&
                    this.ParseData.Equals(input.ParseData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.ParseData != null)
                    hashCode = hashCode * 59 + this.ParseData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
