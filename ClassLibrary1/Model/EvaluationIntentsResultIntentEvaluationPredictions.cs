/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// EvaluationIntentsResultIntentEvaluationPredictions
    /// </summary>
    [DataContract]
    public partial class EvaluationIntentsResultIntentEvaluationPredictions : IEquatable<EvaluationIntentsResultIntentEvaluationPredictions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationIntentsResultIntentEvaluationPredictions" /> class.
        /// </summary>
        /// <param name="intent">intent.</param>
        /// <param name="predicted">predicted.</param>
        /// <param name="text">text.</param>
        /// <param name="confidence">confidence.</param>
        public EvaluationIntentsResultIntentEvaluationPredictions(string intent = default(string), string predicted = default(string), string text = default(string), decimal confidence = default(decimal))
        {
            this.Intent = intent;
            this.Predicted = predicted;
            this.Text = text;
            this.Confidence = confidence;
        }

        /// <summary>
        /// Gets or Sets Intent
        /// </summary>
        [DataMember(Name = "intent", EmitDefaultValue = false)]
        public string Intent { get; set; }

        /// <summary>
        /// Gets or Sets Predicted
        /// </summary>
        [DataMember(Name = "predicted", EmitDefaultValue = false)]
        public string Predicted { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public decimal Confidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationIntentsResultIntentEvaluationPredictions {\n");
            sb.Append("  Intent: ").Append(Intent).Append("\n");
            sb.Append("  Predicted: ").Append(Predicted).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluationIntentsResultIntentEvaluationPredictions);
        }

        /// <summary>
        /// Returns true if EvaluationIntentsResultIntentEvaluationPredictions instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluationIntentsResultIntentEvaluationPredictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationIntentsResultIntentEvaluationPredictions input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Intent == input.Intent ||
                    (this.Intent != null &&
                    this.Intent.Equals(input.Intent))
                ) &&
                (
                    this.Predicted == input.Predicted ||
                    (this.Predicted != null &&
                    this.Predicted.Equals(input.Predicted))
                ) &&
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) &&
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Intent != null)
                    hashCode = hashCode * 59 + this.Intent.GetHashCode();
                if (this.Predicted != null)
                    hashCode = hashCode * 59 + this.Predicted.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
