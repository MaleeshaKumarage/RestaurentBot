/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// SlotDescription
    /// </summary>
    [DataContract]
    public partial class SlotDescription : IEquatable<SlotDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SlotDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SlotDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SlotDescription" /> class.
        /// </summary>
        /// <param name="autoFill">autoFill (required).</param>
        /// <param name="initialValue">initialValue.</param>
        /// <param name="type">type (required).</param>
        /// <param name="values">values.</param>
        public SlotDescription(bool autoFill = default(bool), string initialValue = default(string), string type = default(string), List<string> values = default(List<string>))
        {
            // to ensure "autoFill" is required (not null)
            if (autoFill == null)
            {
                throw new InvalidDataException("autoFill is a required property for SlotDescription and cannot be null");
            }
            else
            {
                this.AutoFill = autoFill;
            }

            this.InitialValue = initialValue;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SlotDescription and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.InitialValue = initialValue;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets AutoFill
        /// </summary>
        [DataMember(Name = "auto_fill", EmitDefaultValue = false)]
        public bool AutoFill { get; set; }

        /// <summary>
        /// Gets or Sets InitialValue
        /// </summary>
        [DataMember(Name = "initial_value", EmitDefaultValue = true)]
        public string InitialValue { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlotDescription {\n");
            sb.Append("  AutoFill: ").Append(AutoFill).Append("\n");
            sb.Append("  InitialValue: ").Append(InitialValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SlotDescription);
        }

        /// <summary>
        /// Returns true if SlotDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of SlotDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlotDescription input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AutoFill == input.AutoFill ||
                    this.AutoFill.Equals(input.AutoFill)
                ) &&
                (
                    this.InitialValue == input.InitialValue ||
                    (this.InitialValue != null &&
                    this.InitialValue.Equals(input.InitialValue))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) &&
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AutoFill.GetHashCode();
                if (this.InitialValue != null)
                    hashCode = hashCode * 59 + this.InitialValue.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
