/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// Addional option
    /// </summary>
    [DataContract]
    public partial class DomainConfig : IEquatable<DomainConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainConfig" /> class.
        /// </summary>
        /// <param name="storeEntitiesAsSlots">Store all entites as slot when found.</param>
        public DomainConfig(bool storeEntitiesAsSlots = default(bool))
        {
            this.StoreEntitiesAsSlots = storeEntitiesAsSlots;
        }

        /// <summary>
        /// Store all entites as slot when found
        /// </summary>
        /// <value>Store all entites as slot when found</value>
        [DataMember(Name = "store_entities_as_slots", EmitDefaultValue = false)]
        public bool StoreEntitiesAsSlots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainConfig {\n");
            sb.Append("  StoreEntitiesAsSlots: ").Append(StoreEntitiesAsSlots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainConfig);
        }

        /// <summary>
        /// Returns true if DomainConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainConfig input)
        {
            if (input == null)
                return false;

            return
                (
                    this.StoreEntitiesAsSlots == input.StoreEntitiesAsSlots ||
                    this.StoreEntitiesAsSlots.Equals(input.StoreEntitiesAsSlots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.StoreEntitiesAsSlots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
