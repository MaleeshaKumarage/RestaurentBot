/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// ModelRequest
    /// </summary>
    [DataContract]
    public partial class ModelRequest : IEquatable<ModelRequest>, IValidatableObject
    {
        /// <summary>
        /// Name of remote storage system
        /// </summary>
        /// <value>Name of remote storage system</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RemoteStorageEnum
        {
            /// <summary>
            /// Enum Aws for value: aws
            /// </summary>
            [EnumMember(Value = "aws")]
            Aws = 1,

            /// <summary>
            /// Enum Gcs for value: gcs
            /// </summary>
            [EnumMember(Value = "gcs")]
            Gcs = 2,

            /// <summary>
            /// Enum Azure for value: azure
            /// </summary>
            [EnumMember(Value = "azure")]
            Azure = 3

        }

        /// <summary>
        /// Name of remote storage system
        /// </summary>
        /// <value>Name of remote storage system</value>
        [DataMember(Name = "remote_storage", EmitDefaultValue = false)]
        public RemoteStorageEnum? RemoteStorage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelRequest" /> class.
        /// </summary>
        /// <param name="modelFile">Path to model file.</param>
        /// <param name="modelServer">modelServer.</param>
        /// <param name="remoteStorage">Name of remote storage system.</param>
        public ModelRequest(string modelFile = default(string), EndpointConfig modelServer = default(EndpointConfig), RemoteStorageEnum? remoteStorage = default(RemoteStorageEnum?))
        {
            this.ModelFile = modelFile;
            this.ModelServer = modelServer;
            this.RemoteStorage = remoteStorage;
        }

        /// <summary>
        /// Path to model file
        /// </summary>
        /// <value>Path to model file</value>
        [DataMember(Name = "model_file", EmitDefaultValue = false)]
        public string ModelFile { get; set; }

        /// <summary>
        /// Gets or Sets ModelServer
        /// </summary>
        [DataMember(Name = "model_server", EmitDefaultValue = false)]
        public EndpointConfig ModelServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelRequest {\n");
            sb.Append("  ModelFile: ").Append(ModelFile).Append("\n");
            sb.Append("  ModelServer: ").Append(ModelServer).Append("\n");
            sb.Append("  RemoteStorage: ").Append(RemoteStorage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelRequest);
        }

        /// <summary>
        /// Returns true if ModelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ModelFile == input.ModelFile ||
                    (this.ModelFile != null &&
                    this.ModelFile.Equals(input.ModelFile))
                ) &&
                (
                    this.ModelServer == input.ModelServer ||
                    (this.ModelServer != null &&
                    this.ModelServer.Equals(input.ModelServer))
                ) &&
                (
                    this.RemoteStorage == input.RemoteStorage ||
                    this.RemoteStorage.Equals(input.RemoteStorage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelFile != null)
                    hashCode = hashCode * 59 + this.ModelFile.GetHashCode();
                if (this.ModelServer != null)
                    hashCode = hashCode * 59 + this.ModelServer.GetHashCode();
                hashCode = hashCode * 59 + this.RemoteStorage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
