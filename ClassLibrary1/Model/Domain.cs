/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ApiClient.Client.OpenAPIDateConverter;

namespace ApiClient.Model
{
    /// <summary>
    /// The bot&#39;s domain.
    /// </summary>
    [DataContract]
    public partial class Domain : IEquatable<Domain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        /// <param name="config">config.</param>
        /// <param name="intents">All intent names and properties.</param>
        /// <param name="entities">All entity names.</param>
        /// <param name="slots">Slot names and configuration.</param>
        /// <param name="templates">Bot response templates.</param>
        /// <param name="actions">Available action names.</param>
        public Domain(DomainConfig config = default(DomainConfig), List<Dictionary<string, IntentDescription>> intents = default(List<Dictionary<string, IntentDescription>>), List<string> entities = default(List<string>), Dictionary<string, SlotDescription> slots = default(Dictionary<string, SlotDescription>), Dictionary<string, TemplateDescription> templates = default(Dictionary<string, TemplateDescription>), List<string> actions = default(List<string>))
        {
            this.Config = config;
            this.Intents = intents;
            this.Entities = entities;
            this.Slots = slots;
            this.Templates = templates;
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public DomainConfig Config { get; set; }

        /// <summary>
        /// All intent names and properties
        /// </summary>
        /// <value>All intent names and properties</value>
        [DataMember(Name = "intents", EmitDefaultValue = false)]
        public List<Dictionary<string, IntentDescription>> Intents { get; set; }

        /// <summary>
        /// All entity names
        /// </summary>
        /// <value>All entity names</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<string> Entities { get; set; }

        /// <summary>
        /// Slot names and configuration
        /// </summary>
        /// <value>Slot names and configuration</value>
        [DataMember(Name = "slots", EmitDefaultValue = false)]
        public Dictionary<string, SlotDescription> Slots { get; set; }

        /// <summary>
        /// Bot response templates
        /// </summary>
        /// <value>Bot response templates</value>
        [DataMember(Name = "templates", EmitDefaultValue = false)]
        public Dictionary<string, TemplateDescription> Templates { get; set; }

        /// <summary>
        /// Available action names
        /// </summary>
        /// <value>Available action names</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<string> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Intents: ").Append(Intents).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domain);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="input">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) &&
                (
                    this.Intents == input.Intents ||
                    this.Intents != null &&
                    input.Intents != null &&
                    this.Intents.SequenceEqual(input.Intents)
                ) &&
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) &&
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    input.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                ) &&
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) &&
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Intents != null)
                    hashCode = hashCode * 59 + this.Intents.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
