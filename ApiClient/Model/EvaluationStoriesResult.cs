/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vevro.Rasa.ApiClient.Client.OpenAPIDateConverter;

namespace Vevro.Rasa.ApiClient.Model
{
    /// <summary>
    /// EvaluationStoriesResult
    /// </summary>
    [DataContract]
    public partial class EvaluationStoriesResult : IEquatable<EvaluationStoriesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationStoriesResult" /> class.
        /// </summary>
        /// <param name="actions">Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html.</param>
        /// <param name="isEndToEndEvaluation">True if evaluation is end-to-end, false otherwise.</param>
        /// <param name="precision">Precision of the classification, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html.</param>
        /// <param name="f1">F1 score of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html.</param>
        /// <param name="accuracy">Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html.</param>
        /// <param name="inTrainingDataFraction">Fraction of stories that are present in the training data of the model loaded at evaluation time..</param>
        /// <param name="report">Sklearn classifcation report, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html.</param>
        public EvaluationStoriesResult(List<EvaluationStoriesResultActions> actions = default(List<EvaluationStoriesResultActions>), bool isEndToEndEvaluation = default(bool), decimal precision = default(decimal), decimal f1 = default(decimal), decimal accuracy = default(decimal), decimal inTrainingDataFraction = default(decimal), string report = default(string))
        {
            this.Actions = actions;
            this.IsEndToEndEvaluation = isEndToEndEvaluation;
            this.Precision = precision;
            this.F1 = f1;
            this.Accuracy = accuracy;
            this.InTrainingDataFraction = inTrainingDataFraction;
            this.Report = report;
        }

        /// <summary>
        /// Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
        /// </summary>
        /// <value>Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<EvaluationStoriesResultActions> Actions { get; set; }

        /// <summary>
        /// True if evaluation is end-to-end, false otherwise
        /// </summary>
        /// <value>True if evaluation is end-to-end, false otherwise</value>
        [DataMember(Name = "is_end_to_end_evaluation", EmitDefaultValue = false)]
        public bool IsEndToEndEvaluation { get; set; }

        /// <summary>
        /// Precision of the classification, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
        /// </summary>
        /// <value>Precision of the classification, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html</value>
        [DataMember(Name = "precision", EmitDefaultValue = false)]
        public decimal Precision { get; set; }

        /// <summary>
        /// F1 score of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
        /// </summary>
        /// <value>F1 score of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html</value>
        [DataMember(Name = "f1", EmitDefaultValue = false)]
        public decimal F1 { get; set; }

        /// <summary>
        /// Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
        /// </summary>
        /// <value>Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html</value>
        [DataMember(Name = "accuracy", EmitDefaultValue = false)]
        public decimal Accuracy { get; set; }

        /// <summary>
        /// Fraction of stories that are present in the training data of the model loaded at evaluation time.
        /// </summary>
        /// <value>Fraction of stories that are present in the training data of the model loaded at evaluation time.</value>
        [DataMember(Name = "in_training_data_fraction", EmitDefaultValue = false)]
        public decimal InTrainingDataFraction { get; set; }

        /// <summary>
        /// Sklearn classifcation report, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html
        /// </summary>
        /// <value>Sklearn classifcation report, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html</value>
        [DataMember(Name = "report", EmitDefaultValue = false)]
        public string Report { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationStoriesResult {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  IsEndToEndEvaluation: ").Append(IsEndToEndEvaluation).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  F1: ").Append(F1).Append("\n");
            sb.Append("  Accuracy: ").Append(Accuracy).Append("\n");
            sb.Append("  InTrainingDataFraction: ").Append(InTrainingDataFraction).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluationStoriesResult);
        }

        /// <summary>
        /// Returns true if EvaluationStoriesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluationStoriesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationStoriesResult input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) &&
                (
                    this.IsEndToEndEvaluation == input.IsEndToEndEvaluation ||
                    this.IsEndToEndEvaluation.Equals(input.IsEndToEndEvaluation)
                ) &&
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                ) &&
                (
                    this.F1 == input.F1 ||
                    this.F1.Equals(input.F1)
                ) &&
                (
                    this.Accuracy == input.Accuracy ||
                    this.Accuracy.Equals(input.Accuracy)
                ) &&
                (
                    this.InTrainingDataFraction == input.InTrainingDataFraction ||
                    this.InTrainingDataFraction.Equals(input.InTrainingDataFraction)
                ) &&
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                hashCode = hashCode * 59 + this.IsEndToEndEvaluation.GetHashCode();
                hashCode = hashCode * 59 + this.Precision.GetHashCode();
                hashCode = hashCode * 59 + this.F1.GetHashCode();
                hashCode = hashCode * 59 + this.Accuracy.GetHashCode();
                hashCode = hashCode * 59 + this.InTrainingDataFraction.GetHashCode();
                if (this.Report != null)
                    hashCode = hashCode * 59 + this.Report.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
