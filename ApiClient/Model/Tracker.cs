/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vevro.Rasa.ApiClient.Client.OpenAPIDateConverter;

namespace Vevro.Rasa.ApiClient.Model
{
    /// <summary>
    /// Conversation tracker which stores the conversation state.
    /// </summary>
    [DataContract]
    public partial class Tracker : IEquatable<Tracker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tracker" /> class.
        /// </summary>
        /// <param name="conversationId">Id of the conversation.</param>
        /// <param name="slots">Slot values.</param>
        /// <param name="latestMessage">latestMessage.</param>
        /// <param name="latestEventTime">Most recent event time.</param>
        /// <param name="followupAction">Deterministic scheduled next action.</param>
        /// <param name="paused">Bot is pasued.</param>
        /// <param name="events">Event history.</param>
        /// <param name="latestInputChannel">Communication channel.</param>
        /// <param name="latestActionName">Name of last bot action.</param>
        /// <param name="activeForm">activeForm.</param>
        public Tracker(string conversationId = default(string), Dictionary<string, string> slots = default(Dictionary<string, string>), ParseResult latestMessage = default(ParseResult), decimal latestEventTime = default(decimal), string followupAction = default(string), bool paused = default(bool), List<Event> events = default(List<Event>), string latestInputChannel = default(string), string latestActionName = default(string), TrackerActiveForm activeForm = default(TrackerActiveForm))
        {
            this.ConversationId = conversationId;
            this.Slots = slots;
            this.LatestMessage = latestMessage;
            this.LatestEventTime = latestEventTime;
            this.FollowupAction = followupAction;
            this.Paused = paused;
            this.Events = events;
            this.LatestInputChannel = latestInputChannel;
            this.LatestActionName = latestActionName;
            this.ActiveForm = activeForm;
        }

        /// <summary>
        /// Id of the conversation
        /// </summary>
        /// <value>Id of the conversation</value>
        [DataMember(Name = "sender_id", EmitDefaultValue = false)]
        public string ConversationId { get; set; }

        /// <summary>
        /// Slot values
        /// </summary>
        /// <value>Slot values</value>
        [DataMember(Name = "slots", EmitDefaultValue = false)]
        public Dictionary<string, string> Slots { get; set; }

        /// <summary>
        /// Gets or Sets LatestMessage
        /// </summary>
        [DataMember(Name = "latest_message", EmitDefaultValue = false)]
        public ParseResult LatestMessage { get; set; }

        /// <summary>
        /// Most recent event time
        /// </summary>
        /// <value>Most recent event time</value>
        [DataMember(Name = "latest_event_time", EmitDefaultValue = false)]
        public decimal LatestEventTime { get; set; }

        /// <summary>
        /// Deterministic scheduled next action
        /// </summary>
        /// <value>Deterministic scheduled next action</value>
        [DataMember(Name = "followup_action", EmitDefaultValue = false)]
        public string FollowupAction { get; set; }

        /// <summary>
        /// Bot is pasued
        /// </summary>
        /// <value>Bot is pasued</value>
        [DataMember(Name = "paused", EmitDefaultValue = false)]
        public bool Paused { get; set; }

        /// <summary>
        /// Event history
        /// </summary>
        /// <value>Event history</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<Event> Events { get; set; }

        /// <summary>
        /// Communication channel
        /// </summary>
        /// <value>Communication channel</value>
        [DataMember(Name = "latest_input_channel", EmitDefaultValue = false)]
        public string LatestInputChannel { get; set; }

        /// <summary>
        /// Name of last bot action
        /// </summary>
        /// <value>Name of last bot action</value>
        [DataMember(Name = "latest_action_name", EmitDefaultValue = false)]
        public string LatestActionName { get; set; }

        /// <summary>
        /// Gets or Sets ActiveForm
        /// </summary>
        [DataMember(Name = "active_form", EmitDefaultValue = false)]
        public TrackerActiveForm ActiveForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tracker {\n");
            sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("  LatestMessage: ").Append(LatestMessage).Append("\n");
            sb.Append("  LatestEventTime: ").Append(LatestEventTime).Append("\n");
            sb.Append("  FollowupAction: ").Append(FollowupAction).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  LatestInputChannel: ").Append(LatestInputChannel).Append("\n");
            sb.Append("  LatestActionName: ").Append(LatestActionName).Append("\n");
            sb.Append("  ActiveForm: ").Append(ActiveForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tracker);
        }

        /// <summary>
        /// Returns true if Tracker instances are equal
        /// </summary>
        /// <param name="input">Instance of Tracker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tracker input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ConversationId == input.ConversationId ||
                    (this.ConversationId != null &&
                    this.ConversationId.Equals(input.ConversationId))
                ) &&
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    input.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                ) &&
                (
                    this.LatestMessage == input.LatestMessage ||
                    (this.LatestMessage != null &&
                    this.LatestMessage.Equals(input.LatestMessage))
                ) &&
                (
                    this.LatestEventTime == input.LatestEventTime ||
                    this.LatestEventTime.Equals(input.LatestEventTime)
                ) &&
                (
                    this.FollowupAction == input.FollowupAction ||
                    (this.FollowupAction != null &&
                    this.FollowupAction.Equals(input.FollowupAction))
                ) &&
                (
                    this.Paused == input.Paused ||
                    this.Paused.Equals(input.Paused)
                ) &&
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) &&
                (
                    this.LatestInputChannel == input.LatestInputChannel ||
                    (this.LatestInputChannel != null &&
                    this.LatestInputChannel.Equals(input.LatestInputChannel))
                ) &&
                (
                    this.LatestActionName == input.LatestActionName ||
                    (this.LatestActionName != null &&
                    this.LatestActionName.Equals(input.LatestActionName))
                ) &&
                (
                    this.ActiveForm == input.ActiveForm ||
                    (this.ActiveForm != null &&
                    this.ActiveForm.Equals(input.ActiveForm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConversationId != null)
                    hashCode = hashCode * 59 + this.ConversationId.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                if (this.LatestMessage != null)
                    hashCode = hashCode * 59 + this.LatestMessage.GetHashCode();
                hashCode = hashCode * 59 + this.LatestEventTime.GetHashCode();
                if (this.FollowupAction != null)
                    hashCode = hashCode * 59 + this.FollowupAction.GetHashCode();
                hashCode = hashCode * 59 + this.Paused.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.LatestInputChannel != null)
                    hashCode = hashCode * 59 + this.LatestInputChannel.GetHashCode();
                if (this.LatestActionName != null)
                    hashCode = hashCode * 59 + this.LatestActionName.GetHashCode();
                if (this.ActiveForm != null)
                    hashCode = hashCode * 59 + this.ActiveForm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
