/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vevro.Rasa.ApiClient.Client.OpenAPIDateConverter;

namespace Vevro.Rasa.ApiClient.Model
{
    /// <summary>
    /// EndpointConfig
    /// </summary>
    [DataContract]
    public partial class EndpointConfig : IEquatable<EndpointConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointConfig" /> class.
        /// </summary>
        /// <param name="url">URL pointing to model.</param>
        /// <param name="_params">Parameters of request.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="basicAuth">Basic authentification data.</param>
        /// <param name="token">Token.</param>
        /// <param name="tokenName">Name of token.</param>
        /// <param name="waitTimeBetweenPulls">Time to wait between pulls from model server.</param>
        public EndpointConfig(string url = default(string), Object _params = default(Object), Object headers = default(Object), Object basicAuth = default(Object), string token = default(string), string tokenName = default(string), int waitTimeBetweenPulls = default(int))
        {
            this.Url = url;
            this.Params = _params;
            this.Headers = headers;
            this.BasicAuth = basicAuth;
            this.Token = token;
            this.TokenName = tokenName;
            this.WaitTimeBetweenPulls = waitTimeBetweenPulls;
        }

        /// <summary>
        /// URL pointing to model
        /// </summary>
        /// <value>URL pointing to model</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Parameters of request
        /// </summary>
        /// <value>Parameters of request</value>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public Object Params { get; set; }

        /// <summary>
        /// HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public Object Headers { get; set; }

        /// <summary>
        /// Basic authentification data
        /// </summary>
        /// <value>Basic authentification data</value>
        [DataMember(Name = "basic_auth", EmitDefaultValue = false)]
        public Object BasicAuth { get; set; }

        /// <summary>
        /// Token
        /// </summary>
        /// <value>Token</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Name of token
        /// </summary>
        /// <value>Name of token</value>
        [DataMember(Name = "token_name", EmitDefaultValue = false)]
        public string TokenName { get; set; }

        /// <summary>
        /// Time to wait between pulls from model server
        /// </summary>
        /// <value>Time to wait between pulls from model server</value>
        [DataMember(Name = "wait_time_between_pulls", EmitDefaultValue = false)]
        public int WaitTimeBetweenPulls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointConfig {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  BasicAuth: ").Append(BasicAuth).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  WaitTimeBetweenPulls: ").Append(WaitTimeBetweenPulls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointConfig);
        }

        /// <summary>
        /// Returns true if EndpointConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointConfig input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) &&
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                ) &&
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) &&
                (
                    this.BasicAuth == input.BasicAuth ||
                    (this.BasicAuth != null &&
                    this.BasicAuth.Equals(input.BasicAuth))
                ) &&
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) &&
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) &&
                (
                    this.WaitTimeBetweenPulls == input.WaitTimeBetweenPulls ||
                    this.WaitTimeBetweenPulls.Equals(input.WaitTimeBetweenPulls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.BasicAuth != null)
                    hashCode = hashCode * 59 + this.BasicAuth.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                hashCode = hashCode * 59 + this.WaitTimeBetweenPulls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
