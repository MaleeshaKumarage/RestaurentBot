/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vevro.Rasa.ApiClient.Client.OpenAPIDateConverter;

namespace Vevro.Rasa.ApiClient.Model
{
    /// <summary>
    /// BotMessage
    /// </summary>
    [DataContract]
    public partial class BotMessage : IEquatable<BotMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BotMessage" /> class.
        /// </summary>
        /// <param name="recipientId">Id of the message receiver.</param>
        /// <param name="text">Message.</param>
        /// <param name="image">Image URL.</param>
        /// <param name="buttons">Quick reply buttons.</param>
        /// <param name="attachement">Additional information.</param>
        public BotMessage(string recipientId = default(string), string text = default(string), string image = default(string), List<BotMessageButtons> buttons = default(List<BotMessageButtons>), List<BotMessageAttachement> attachement = default(List<BotMessageAttachement>))
        {
            this.RecipientId = recipientId;
            this.Text = text;
            this.Image = image;
            this.Buttons = buttons;
            this.Attachement = attachement;
        }

        /// <summary>
        /// Id of the message receiver
        /// </summary>
        /// <value>Id of the message receiver</value>
        [DataMember(Name = "recipient_id", EmitDefaultValue = false)]
        public string RecipientId { get; set; }

        /// <summary>
        /// Message
        /// </summary>
        /// <value>Message</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Image URL
        /// </summary>
        /// <value>Image URL</value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// Quick reply buttons
        /// </summary>
        /// <value>Quick reply buttons</value>
        [DataMember(Name = "buttons", EmitDefaultValue = false)]
        public List<BotMessageButtons> Buttons { get; set; }

        /// <summary>
        /// Additional information
        /// </summary>
        /// <value>Additional information</value>
        [DataMember(Name = "attachement", EmitDefaultValue = false)]
        public List<BotMessageAttachement> Attachement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BotMessage {\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Buttons: ").Append(Buttons).Append("\n");
            sb.Append("  Attachement: ").Append(Attachement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BotMessage);
        }

        /// <summary>
        /// Returns true if BotMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of BotMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BotMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    this.RecipientId == input.RecipientId ||
                    (this.RecipientId != null &&
                    this.RecipientId.Equals(input.RecipientId))
                ) &&
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) &&
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) &&
                (
                    this.Buttons == input.Buttons ||
                    this.Buttons != null &&
                    input.Buttons != null &&
                    this.Buttons.SequenceEqual(input.Buttons)
                ) &&
                (
                    this.Attachement == input.Attachement ||
                    this.Attachement != null &&
                    input.Attachement != null &&
                    this.Attachement.SequenceEqual(input.Attachement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecipientId != null)
                    hashCode = hashCode * 59 + this.RecipientId.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Buttons != null)
                    hashCode = hashCode * 59 + this.Buttons.GetHashCode();
                if (this.Attachement != null)
                    hashCode = hashCode * 59 + this.Attachement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
