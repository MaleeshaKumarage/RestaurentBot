/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Vevro.Rasa.ApiClient.Client.OpenAPIDateConverter;

namespace Vevro.Rasa.ApiClient.Model
{
    /// <summary>
    /// Entities within a message
    /// </summary>
    [DataContract]
    public partial class Entity : IEquatable<Entity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Entity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        /// <param name="start">Char offset of the start (required).</param>
        /// <param name="end">Char offset of the end (required).</param>
        /// <param name="value">Found value for entity (required).</param>
        /// <param name="entity">Type of the entity (required).</param>
        /// <param name="confidence">confidence.</param>
        public Entity(int start = default(int), int end = default(int), string value = default(string), string entity = default(string), decimal confidence = default(decimal))
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for Entity and cannot be null");
            }
            else
            {
                this.Start = start;
            }

            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for Entity and cannot be null");
            }
            else
            {
                this.End = end;
            }

            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for Entity and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            // to ensure "entity" is required (not null)
            if (entity == null)
            {
                throw new InvalidDataException("entity is a required property for Entity and cannot be null");
            }
            else
            {
                this._Entity = entity;
            }

            this.Confidence = confidence;
        }

        /// <summary>
        /// Char offset of the start
        /// </summary>
        /// <value>Char offset of the start</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public int Start { get; set; }

        /// <summary>
        /// Char offset of the end
        /// </summary>
        /// <value>Char offset of the end</value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public int End { get; set; }

        /// <summary>
        /// Found value for entity
        /// </summary>
        /// <value>Found value for entity</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public object Value { get; set; }

        /// <summary>
        /// Type of the entity
        /// </summary>
        /// <value>Type of the entity</value>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string _Entity { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public decimal Confidence { get; set; }



        /// <summary>
        /// Gets or Sets Entity Extractor
        /// </summary>
        [DataMember(Name = "extractor", EmitDefaultValue = false)]
        public string Extractor { get; set; }


        /// <summary>
        /// Additional Info from Entity Extractor
        /// </summary>
        [DataMember(Name = "additional_info", EmitDefaultValue = false)]
        public Newtonsoft.Json.Linq.JObject AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entity {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  _Entity: ").Append(_Entity).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Entity);
        }

        /// <summary>
        /// Returns true if Entity instances are equal
        /// </summary>
        /// <param name="input">Instance of Entity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entity input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) &&
                (
                    this.End == input.End ||
                    this.End.Equals(input.End)
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) &&
                (
                    this._Entity == input._Entity ||
                    (this._Entity != null &&
                    this._Entity.Equals(input._Entity))
                ) &&
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Start.GetHashCode();
                hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this._Entity != null)
                    hashCode = hashCode * 59 + this._Entity.GetHashCode();
                hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
