/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Vevro.Rasa.ApiClient.Client;
using Vevro.Rasa.ApiClient.Model;

namespace Vevro.Rasa.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Run an action in a conversation
        /// </summary>
        /// <remarks>
        /// Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 ConversationsConversationIdExecutePost(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null);

        /// <summary>
        /// Run an action in a conversation
        /// </summary>
        /// <remarks>
        /// Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> ConversationsConversationIdExecutePostWithHttpInfo(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null);
        /// <summary>
        /// Add a message to a tracker
        /// </summary>
        /// <remarks>
        /// Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        Tracker ConversationsConversationIdMessagesPost(string conversationId, Message message, string includeEvents = null);

        /// <summary>
        /// Add a message to a tracker
        /// </summary>
        /// <remarks>
        /// Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        ApiResponse<Tracker> ConversationsConversationIdMessagesPostWithHttpInfo(string conversationId, Message message, string includeEvents = null);
        /// <summary>
        /// Predict the next action
        /// </summary>
        /// <remarks>
        /// Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>PredictResult</returns>
        PredictResult ConversationsConversationIdPredictPost(string conversationId);

        /// <summary>
        /// Predict the next action
        /// </summary>
        /// <remarks>
        /// Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>ApiResponse of PredictResult</returns>
        ApiResponse<PredictResult> ConversationsConversationIdPredictPostWithHttpInfo(string conversationId);
        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation
        /// </summary>
        /// <remarks>
        /// The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns></returns>
        void ConversationsConversationIdStoryGet(string conversationId, decimal? until = null);

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation
        /// </summary>
        /// <remarks>
        /// The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConversationsConversationIdStoryGetWithHttpInfo(string conversationId, decimal? until = null);
        /// <summary>
        /// Append events to a tracker
        /// </summary>
        /// <remarks>
        /// Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        Tracker ConversationsConversationIdTrackerEventsPost(string conversationId, Event[] events, string includeEvents = null);

        /// <summary>
        /// Append events to a tracker
        /// </summary>
        /// <remarks>
        /// Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        ApiResponse<Tracker> ConversationsConversationIdTrackerEventsPostWithHttpInfo(string conversationId, Event[] events, string includeEvents = null);
        /// <summary>
        /// Replace a trackers events
        /// </summary>
        /// <remarks>
        /// Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        Tracker ConversationsConversationIdTrackerEventsPut(string conversationId, List<Event> _event, string includeEvents = null);

        /// <summary>
        /// Replace a trackers events
        /// </summary>
        /// <remarks>
        /// Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        ApiResponse<Tracker> ConversationsConversationIdTrackerEventsPutWithHttpInfo(string conversationId, List<Event> _event, string includeEvents = null);
        /// <summary>
        /// Retrieve a conversations tracker
        /// </summary>
        /// <remarks>
        /// The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Tracker</returns>
        Tracker ConversationsConversationIdTrackerGet(string conversationId, string includeEvents = null, decimal? until = null);

        /// <summary>
        /// Retrieve a conversations tracker
        /// </summary>
        /// <remarks>
        /// The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>ApiResponse of Tracker</returns>
        ApiResponse<Tracker> ConversationsConversationIdTrackerGetWithHttpInfo(string conversationId, string includeEvents = null, decimal? until = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Run an action in a conversation
        /// </summary>
        /// <remarks>
        /// Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> ConversationsConversationIdExecutePostAsync(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null);

        /// <summary>
        /// Run an action in a conversation
        /// </summary>
        /// <remarks>
        /// Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ConversationsConversationIdExecutePostAsyncWithHttpInfo(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null);
        /// <summary>
        /// Add a message to a tracker
        /// </summary>
        /// <remarks>
        /// Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        System.Threading.Tasks.Task<Tracker> ConversationsConversationIdMessagesPostAsync(string conversationId, Message message, string includeEvents = null);

        /// <summary>
        /// Add a message to a tracker
        /// </summary>
        /// <remarks>
        /// Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tracker>> ConversationsConversationIdMessagesPostAsyncWithHttpInfo(string conversationId, Message message, string includeEvents = null);
        /// <summary>
        /// Predict the next action
        /// </summary>
        /// <remarks>
        /// Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>Task of PredictResult</returns>
        System.Threading.Tasks.Task<PredictResult> ConversationsConversationIdPredictPostAsync(string conversationId);

        /// <summary>
        /// Predict the next action
        /// </summary>
        /// <remarks>
        /// Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>Task of ApiResponse (PredictResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PredictResult>> ConversationsConversationIdPredictPostAsyncWithHttpInfo(string conversationId);
        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation
        /// </summary>
        /// <remarks>
        /// The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConversationsConversationIdStoryGetAsync(string conversationId, decimal? until = null);

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation
        /// </summary>
        /// <remarks>
        /// The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConversationsConversationIdStoryGetAsyncWithHttpInfo(string conversationId, decimal? until = null);
        /// <summary>
        /// Append events to a tracker
        /// </summary>
        /// <remarks>
        /// Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerEventsPostAsync(string conversationId, Event[] events, string includeEvents = null);

        /// <summary>
        /// Append events to a tracker
        /// </summary>
        /// <remarks>
        /// Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tracker>> ConversationsConversationIdTrackerEventsPostAsyncWithHttpInfo(string conversationId, Event[] events, string includeEvents = null);
        /// <summary>
        /// Replace a trackers events
        /// </summary>
        /// <remarks>
        /// Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerEventsPutAsync(string conversationId, List<Event> _event, string includeEvents = null);

        /// <summary>
        /// Replace a trackers events
        /// </summary>
        /// <remarks>
        /// Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tracker>> ConversationsConversationIdTrackerEventsPutAsyncWithHttpInfo(string conversationId, List<Event> _event, string includeEvents = null);
        /// <summary>
        /// Retrieve a conversations tracker
        /// </summary>
        /// <remarks>
        /// The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of Tracker</returns>
        System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerGetAsync(string conversationId, string includeEvents = null, decimal? until = null);

        /// <summary>
        /// Retrieve a conversations tracker
        /// </summary>
        /// <remarks>
        /// The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tracker>> ConversationsConversationIdTrackerGetAsyncWithHttpInfo(string conversationId, string includeEvents = null, decimal? until = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApi : ITrackerApiSync, ITrackerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackerApi : ITrackerApi
    {
        private Vevro.Rasa.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackerApi(String basePath)
        {
            this.Configuration = Vevro.Rasa.ApiClient.Client.Configuration.MergeConfigurations(
                Vevro.Rasa.ApiClient.Client.GlobalConfiguration.Instance,
                new Vevro.Rasa.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackerApi(Vevro.Rasa.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Vevro.Rasa.ApiClient.Client.Configuration.MergeConfigurations(
                Vevro.Rasa.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TrackerApi(Vevro.Rasa.ApiClient.Client.ISynchronousClient client, Vevro.Rasa.ApiClient.Client.IAsynchronousClient asyncClient, Vevro.Rasa.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Vevro.Rasa.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Run an action in a conversation Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 ConversationsConversationIdExecutePost(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<InlineResponse2002> localVarResponse = ConversationsConversationIdExecutePostWithHttpInfo(conversationId, actionRequest, includeEvents, outputChannel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run an action in a conversation Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<InlineResponse2002> ConversationsConversationIdExecutePostWithHttpInfo(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdExecutePost");

            // verify the required parameter 'actionRequest' is set
            if (actionRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'actionRequest' when calling TrackerApi->ConversationsConversationIdExecutePost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (outputChannel != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "output_channel", outputChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = actionRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<InlineResponse2002>("/conversations/{conversation_id}/execute", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdExecutePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Run an action in a conversation Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> ConversationsConversationIdExecutePostAsync(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<InlineResponse2002> localVarResponse = await ConversationsConversationIdExecutePostAsyncWithHttpInfo(conversationId, actionRequest, includeEvents, outputChannel);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Run an action in a conversation Runs the action, calling the action server if necessary. Any responses sent by the executed action will be returned as part of the endpoints result, they will not be sent over a connected output channel.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="actionRequest"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="outputChannel">The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<InlineResponse2002>> ConversationsConversationIdExecutePostAsyncWithHttpInfo(string conversationId, ActionRequest actionRequest, string includeEvents = null, string outputChannel = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdExecutePost");

            // verify the required parameter 'actionRequest' is set
            if (actionRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'actionRequest' when calling TrackerApi->ConversationsConversationIdExecutePost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (outputChannel != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "output_channel", outputChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = actionRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/conversations/{conversation_id}/execute", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdExecutePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add a message to a tracker Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        public Tracker ConversationsConversationIdMessagesPost(string conversationId, Message message, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = ConversationsConversationIdMessagesPostWithHttpInfo(conversationId, message, includeEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a message to a tracker Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> ConversationsConversationIdMessagesPostWithHttpInfo(string conversationId, Message message, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdMessagesPost");

            // verify the required parameter 'message' is set
            if (message == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'message' when calling TrackerApi->ConversationsConversationIdMessagesPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = message;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<Tracker>("/conversations/{conversation_id}/messages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdMessagesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add a message to a tracker Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        public async System.Threading.Tasks.Task<Tracker> ConversationsConversationIdMessagesPostAsync(string conversationId, Message message, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = await ConversationsConversationIdMessagesPostAsyncWithHttpInfo(conversationId, message, includeEvents);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Add a message to a tracker Adds a message to a tracker. This doesn&#39;t trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="message"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker>> ConversationsConversationIdMessagesPostAsyncWithHttpInfo(string conversationId, Message message, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdMessagesPost");

            // verify the required parameter 'message' is set
            if (message == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'message' when calling TrackerApi->ConversationsConversationIdMessagesPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = message;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Tracker>("/conversations/{conversation_id}/messages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdMessagesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Predict the next action Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>PredictResult</returns>
        public PredictResult ConversationsConversationIdPredictPost(string conversationId)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> localVarResponse = ConversationsConversationIdPredictPostWithHttpInfo(conversationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict the next action Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>ApiResponse of PredictResult</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> ConversationsConversationIdPredictPostWithHttpInfo(string conversationId)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdPredictPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<PredictResult>("/conversations/{conversation_id}/predict", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdPredictPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Predict the next action Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>Task of PredictResult</returns>
        public async System.Threading.Tasks.Task<PredictResult> ConversationsConversationIdPredictPostAsync(string conversationId)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> localVarResponse = await ConversationsConversationIdPredictPostAsyncWithHttpInfo(conversationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Predict the next action Runs the conversations tracker through the model&#39;s policies to predict the scores of all actions present in the model&#39;s domain. Actions are returned in the &#39;scores&#39; array, sorted on their &#39;score&#39; values. The state of the tracker is not modified.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <returns>Task of ApiResponse (PredictResult)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult>> ConversationsConversationIdPredictPostAsyncWithHttpInfo(string conversationId)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdPredictPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PredictResult>("/conversations/{conversation_id}/predict", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdPredictPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns></returns>
        public void ConversationsConversationIdStoryGet(string conversationId, decimal? until = null)
        {
            ConversationsConversationIdStoryGetWithHttpInfo(conversationId, until);
        }

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Object> ConversationsConversationIdStoryGetWithHttpInfo(string conversationId, decimal? until = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdStoryGet");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/markdown",
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (until != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "until", until))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get<Object>("/conversations/{conversation_id}/story", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdStoryGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConversationsConversationIdStoryGetAsync(string conversationId, decimal? until = null)
        {
            await ConversationsConversationIdStoryGetAsyncWithHttpInfo(conversationId, until);

        }

        /// <summary>
        /// Retrieve an end-to-end story corresponding to a conversation The story represents the whole conversation in end-to-end format. This can be posted to the &#39;/test/stories&#39; endpoint and used as a test.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Object>> ConversationsConversationIdStoryGetAsyncWithHttpInfo(string conversationId, decimal? until = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdStoryGet");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/markdown",
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (until != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "until", until))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/conversations/{conversation_id}/story", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdStoryGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Append events to a tracker Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        public Tracker ConversationsConversationIdTrackerEventsPost(string conversationId, Event[] events, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = ConversationsConversationIdTrackerEventsPostWithHttpInfo(conversationId, events, includeEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append events to a tracker Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> ConversationsConversationIdTrackerEventsPostWithHttpInfo(string conversationId, Event[] events, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerEventsPost");

            // verify the required parameter 'events' is set
            if (events == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'events' when calling TrackerApi->ConversationsConversationIdTrackerEventsPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = events;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<Tracker>("/conversations/{conversation_id}/tracker/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerEventsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Append events to a tracker Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        public async System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerEventsPostAsync(string conversationId, Event[] events, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = await ConversationsConversationIdTrackerEventsPostAsyncWithHttpInfo(conversationId, events, includeEvents);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Append events to a tracker Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="events"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker>> ConversationsConversationIdTrackerEventsPostAsyncWithHttpInfo(string conversationId, Event[] events, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerEventsPost");

            // verify the required parameter 'events' is set
            if (events == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'events' when calling TrackerApi->ConversationsConversationIdTrackerEventsPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = events;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Tracker>("/conversations/{conversation_id}/tracker/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerEventsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replace a trackers events Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Tracker</returns>
        public Tracker ConversationsConversationIdTrackerEventsPut(string conversationId, List<Event> _event, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = ConversationsConversationIdTrackerEventsPutWithHttpInfo(conversationId, _event, includeEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a trackers events Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of Tracker</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> ConversationsConversationIdTrackerEventsPutWithHttpInfo(string conversationId, List<Event> _event, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerEventsPut");

            // verify the required parameter '_event' is set
            if (_event == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter '_event' when calling TrackerApi->ConversationsConversationIdTrackerEventsPut");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = _event;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Put<Tracker>("/conversations/{conversation_id}/tracker/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerEventsPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replace a trackers events Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of Tracker</returns>
        public async System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerEventsPutAsync(string conversationId, List<Event> _event, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = await ConversationsConversationIdTrackerEventsPutAsyncWithHttpInfo(conversationId, _event, includeEvents);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a trackers events Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker>> ConversationsConversationIdTrackerEventsPutAsyncWithHttpInfo(string conversationId, List<Event> _event, string includeEvents = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerEventsPut");

            // verify the required parameter '_event' is set
            if (_event == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter '_event' when calling TrackerApi->ConversationsConversationIdTrackerEventsPut");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = _event;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Tracker>("/conversations/{conversation_id}/tracker/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerEventsPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieve a conversations tracker The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Tracker</returns>
        public Tracker ConversationsConversationIdTrackerGet(string conversationId, string includeEvents = null, decimal? until = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = ConversationsConversationIdTrackerGetWithHttpInfo(conversationId, includeEvents, until);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a conversations tracker The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>ApiResponse of Tracker</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> ConversationsConversationIdTrackerGetWithHttpInfo(string conversationId, string includeEvents = null, decimal? until = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerGet");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (until != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "until", until))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get<Tracker>("/conversations/{conversation_id}/tracker", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieve a conversations tracker The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of Tracker</returns>
        public async System.Threading.Tasks.Task<Tracker> ConversationsConversationIdTrackerGetAsync(string conversationId, string includeEvents = null, decimal? until = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker> localVarResponse = await ConversationsConversationIdTrackerGetAsyncWithHttpInfo(conversationId, includeEvents, until);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a conversations tracker The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Id of the conversation</param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <param name="until">All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)</param>
        /// <returns>Task of ApiResponse (Tracker)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Tracker>> ConversationsConversationIdTrackerGetAsyncWithHttpInfo(string conversationId, string includeEvents = null, decimal? until = null)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'conversationId' when calling TrackerApi->ConversationsConversationIdTrackerGet");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (conversationId != null)
                requestOptions.PathParameters.Add("conversation_id", Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (until != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "until", until))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Tracker>("/conversations/{conversation_id}/tracker", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConversationsConversationIdTrackerGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
