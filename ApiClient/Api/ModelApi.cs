/* 
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Vevro.Rasa.ApiClient.Client;
using Vevro.Rasa.ApiClient.Model;

namespace Vevro.Rasa.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Unload the trained model
        /// </summary>
        /// <remarks>
        /// Unloads the currently loaded trained model from the server.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ModelDelete();

        /// <summary>
        /// Unload the trained model
        /// </summary>
        /// <remarks>
        /// Unloads the currently loaded trained model from the server.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelDeleteWithHttpInfo();
        /// <summary>
        /// Parse a message using the Rasa model
        /// </summary>
        /// <remarks>
        /// Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>ParseResult</returns>
        ParseResult ModelParsePost(InlineObject inlineObject, string emulationMode = null);

        /// <summary>
        /// Parse a message using the Rasa model
        /// </summary>
        /// <remarks>
        /// Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>ApiResponse of ParseResult</returns>
        ApiResponse<ParseResult> ModelParsePostWithHttpInfo(InlineObject inlineObject, string emulationMode = null);
        /// <summary>
        /// Predict an action on a temporary state
        /// </summary>
        /// <remarks>
        /// Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>PredictResult</returns>
        PredictResult ModelPredictPost(List<Event> _event, string includeEvents = null);

        /// <summary>
        /// Predict an action on a temporary state
        /// </summary>
        /// <remarks>
        /// Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of PredictResult</returns>
        ApiResponse<PredictResult> ModelPredictPostWithHttpInfo(List<Event> _event, string includeEvents = null);
        /// <summary>
        /// Replace the currently loaded model
        /// </summary>
        /// <remarks>
        /// Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns></returns>
        void ModelPut(ModelRequest modelRequest);

        /// <summary>
        /// Replace the currently loaded model
        /// </summary>
        /// <remarks>
        /// Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelPutWithHttpInfo(ModelRequest modelRequest);
        /// <summary>
        /// Perform an intent evaluation
        /// </summary>
        /// <remarks>
        /// Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>EvaluationIntentsResult</returns>
        EvaluationIntentsResult ModelTestIntentsPost(string body, string model = null);

        /// <summary>
        /// Perform an intent evaluation
        /// </summary>
        /// <remarks>
        /// Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>ApiResponse of EvaluationIntentsResult</returns>
        ApiResponse<EvaluationIntentsResult> ModelTestIntentsPostWithHttpInfo(string body, string model = null);
        /// <summary>
        /// Evaluate stories
        /// </summary>
        /// <remarks>
        /// Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>EvaluationStoriesResult</returns>
        EvaluationStoriesResult ModelTestStoriesPost(string body, bool? e2e = null);

        /// <summary>
        /// Evaluate stories
        /// </summary>
        /// <remarks>
        /// Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>ApiResponse of EvaluationStoriesResult</returns>
        ApiResponse<EvaluationStoriesResult> ModelTestStoriesPostWithHttpInfo(string body, bool? e2e = null);
        /// <summary>
        /// Train a Rasa model
        /// </summary>
        /// <remarks>
        /// Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ModelTrainPost(TrainingRequest trainingRequest);

        /// <summary>
        /// Train a Rasa model
        /// </summary>
        /// <remarks>
        /// Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ModelTrainPostWithHttpInfo(TrainingRequest trainingRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Unload the trained model
        /// </summary>
        /// <remarks>
        /// Unloads the currently loaded trained model from the server.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelDeleteAsync();

        /// <summary>
        /// Unload the trained model
        /// </summary>
        /// <remarks>
        /// Unloads the currently loaded trained model from the server.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelDeleteAsyncWithHttpInfo();
        /// <summary>
        /// Parse a message using the Rasa model
        /// </summary>
        /// <remarks>
        /// Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>Task of ParseResult</returns>
        System.Threading.Tasks.Task<ParseResult> ModelParsePostAsync(InlineObject inlineObject, string emulationMode = null);

        /// <summary>
        /// Parse a message using the Rasa model
        /// </summary>
        /// <remarks>
        /// Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>Task of ApiResponse (ParseResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParseResult>> ModelParsePostAsyncWithHttpInfo(InlineObject inlineObject, string emulationMode = null);
        /// <summary>
        /// Predict an action on a temporary state
        /// </summary>
        /// <remarks>
        /// Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of PredictResult</returns>
        System.Threading.Tasks.Task<PredictResult> ModelPredictPostAsync(List<Event> _event, string includeEvents = null);

        /// <summary>
        /// Predict an action on a temporary state
        /// </summary>
        /// <remarks>
        /// Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (PredictResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PredictResult>> ModelPredictPostAsyncWithHttpInfo(List<Event> _event, string includeEvents = null);
        /// <summary>
        /// Replace the currently loaded model
        /// </summary>
        /// <remarks>
        /// Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelPutAsync(ModelRequest modelRequest);

        /// <summary>
        /// Replace the currently loaded model
        /// </summary>
        /// <remarks>
        /// Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelPutAsyncWithHttpInfo(ModelRequest modelRequest);
        /// <summary>
        /// Perform an intent evaluation
        /// </summary>
        /// <remarks>
        /// Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>Task of EvaluationIntentsResult</returns>
        System.Threading.Tasks.Task<EvaluationIntentsResult> ModelTestIntentsPostAsync(string body, string model = null);

        /// <summary>
        /// Perform an intent evaluation
        /// </summary>
        /// <remarks>
        /// Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>Task of ApiResponse (EvaluationIntentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationIntentsResult>> ModelTestIntentsPostAsyncWithHttpInfo(string body, string model = null);
        /// <summary>
        /// Evaluate stories
        /// </summary>
        /// <remarks>
        /// Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>Task of EvaluationStoriesResult</returns>
        System.Threading.Tasks.Task<EvaluationStoriesResult> ModelTestStoriesPostAsync(string body, bool? e2e = null);

        /// <summary>
        /// Evaluate stories
        /// </summary>
        /// <remarks>
        /// Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (EvaluationStoriesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationStoriesResult>> ModelTestStoriesPostAsyncWithHttpInfo(string body, bool? e2e = null);
        /// <summary>
        /// Train a Rasa model
        /// </summary>
        /// <remarks>
        /// Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ModelTrainPostAsync(TrainingRequest trainingRequest);

        /// <summary>
        /// Train a Rasa model
        /// </summary>
        /// <remarks>
        /// Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </remarks>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ModelTrainPostAsyncWithHttpInfo(TrainingRequest trainingRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelApi : IModelApiSync, IModelApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelApi : IModelApi
    {
        private Vevro.Rasa.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelApi(String basePath)
        {
            this.Configuration = Vevro.Rasa.ApiClient.Client.Configuration.MergeConfigurations(
                Vevro.Rasa.ApiClient.Client.GlobalConfiguration.Instance,
                new Vevro.Rasa.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelApi(Vevro.Rasa.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Vevro.Rasa.ApiClient.Client.Configuration.MergeConfigurations(
                Vevro.Rasa.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Vevro.Rasa.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModelApi(Vevro.Rasa.ApiClient.Client.ISynchronousClient client, Vevro.Rasa.ApiClient.Client.IAsynchronousClient asyncClient, Vevro.Rasa.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Vevro.Rasa.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Vevro.Rasa.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Vevro.Rasa.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Unload the trained model Unloads the currently loaded trained model from the server.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ModelDelete()
        {
            ModelDeleteWithHttpInfo();
        }

        /// <summary>
        /// Unload the trained model Unloads the currently loaded trained model from the server.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Object> ModelDeleteWithHttpInfo()
        {
            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/model", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Unload the trained model Unloads the currently loaded trained model from the server.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelDeleteAsync()
        {
            await ModelDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// Unload the trained model Unloads the currently loaded trained model from the server.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Object>> ModelDeleteAsyncWithHttpInfo()
        {

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/model", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Parse a message using the Rasa model Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>ParseResult</returns>
        public ParseResult ModelParsePost(InlineObject inlineObject, string emulationMode = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<ParseResult> localVarResponse = ModelParsePostWithHttpInfo(inlineObject, emulationMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parse a message using the Rasa model Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>ApiResponse of ParseResult</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<ParseResult> ModelParsePostWithHttpInfo(InlineObject inlineObject, string emulationMode = null)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling ModelApi->ModelParsePost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (emulationMode != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "emulation_mode", emulationMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = inlineObject;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<ParseResult>("/model/parse", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelParsePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Parse a message using the Rasa model Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>Task of ParseResult</returns>
        public async System.Threading.Tasks.Task<ParseResult> ModelParsePostAsync(InlineObject inlineObject, string emulationMode = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<ParseResult> localVarResponse = await ModelParsePostAsyncWithHttpInfo(inlineObject, emulationMode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Parse a message using the Rasa model Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="emulationMode">Specify the emulation mode. (optional)</param>
        /// <returns>Task of ApiResponse (ParseResult)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<ParseResult>> ModelParsePostAsyncWithHttpInfo(InlineObject inlineObject, string emulationMode = null)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling ModelApi->ModelParsePost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (emulationMode != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "emulation_mode", emulationMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = inlineObject;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ParseResult>("/model/parse", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelParsePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Predict an action on a temporary state Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>PredictResult</returns>
        public PredictResult ModelPredictPost(List<Event> _event, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> localVarResponse = ModelPredictPostWithHttpInfo(_event, includeEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict an action on a temporary state Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>ApiResponse of PredictResult</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> ModelPredictPostWithHttpInfo(List<Event> _event, string includeEvents = null)
        {
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter '_event' when calling ModelApi->ModelPredictPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = _event;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<PredictResult>("/model/predict", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelPredictPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Predict an action on a temporary state Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of PredictResult</returns>
        public async System.Threading.Tasks.Task<PredictResult> ModelPredictPostAsync(List<Event> _event, string includeEvents = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult> localVarResponse = await ModelPredictPostAsyncWithHttpInfo(_event, includeEvents);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Predict an action on a temporary state Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <param name="includeEvents">Specify which events of the tracker the response should contain. (optional, default to AFTER_RESTART)</param>
        /// <returns>Task of ApiResponse (PredictResult)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<PredictResult>> ModelPredictPostAsyncWithHttpInfo(List<Event> _event, string includeEvents = null)
        {
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter '_event' when calling ModelApi->ModelPredictPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (includeEvents != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include_events", includeEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = _event;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PredictResult>("/model/predict", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelPredictPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replace the currently loaded model Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns></returns>
        public void ModelPut(ModelRequest modelRequest)
        {
            ModelPutWithHttpInfo(modelRequest);
        }

        /// <summary>
        /// Replace the currently loaded model Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<Object> ModelPutWithHttpInfo(ModelRequest modelRequest)
        {
            // verify the required parameter 'modelRequest' is set
            if (modelRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'modelRequest' when calling ModelApi->ModelPut");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = modelRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/model", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replace the currently loaded model Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelPutAsync(ModelRequest modelRequest)
        {
            await ModelPutAsyncWithHttpInfo(modelRequest);

        }

        /// <summary>
        /// Replace the currently loaded model Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<Object>> ModelPutAsyncWithHttpInfo(ModelRequest modelRequest)
        {
            // verify the required parameter 'modelRequest' is set
            if (modelRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'modelRequest' when calling ModelApi->ModelPut");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            requestOptions.Data = modelRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/model", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Perform an intent evaluation Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>EvaluationIntentsResult</returns>
        public EvaluationIntentsResult ModelTestIntentsPost(string body, string model = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationIntentsResult> localVarResponse = ModelTestIntentsPostWithHttpInfo(body, model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform an intent evaluation Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>ApiResponse of EvaluationIntentsResult</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationIntentsResult> ModelTestIntentsPostWithHttpInfo(string body, string model = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'body' when calling ModelApi->ModelTestIntentsPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "text/markdown"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (model != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "model", model))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<EvaluationIntentsResult>("/model/test/intents", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTestIntentsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Perform an intent evaluation Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>Task of EvaluationIntentsResult</returns>
        public async System.Threading.Tasks.Task<EvaluationIntentsResult> ModelTestIntentsPostAsync(string body, string model = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationIntentsResult> localVarResponse = await ModelTestIntentsPostAsyncWithHttpInfo(body, model);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Perform an intent evaluation Evaluates intents against the currently loaded Rasa model or the model specified in the query.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="model">Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)</param>
        /// <returns>Task of ApiResponse (EvaluationIntentsResult)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationIntentsResult>> ModelTestIntentsPostAsyncWithHttpInfo(string body, string model = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'body' when calling ModelApi->ModelTestIntentsPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "text/markdown"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (model != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "model", model))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<EvaluationIntentsResult>("/model/test/intents", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTestIntentsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Evaluate stories Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>EvaluationStoriesResult</returns>
        public EvaluationStoriesResult ModelTestStoriesPost(string body, bool? e2e = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationStoriesResult> localVarResponse = ModelTestStoriesPostWithHttpInfo(body, e2e);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate stories Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>ApiResponse of EvaluationStoriesResult</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationStoriesResult> ModelTestStoriesPostWithHttpInfo(string body, bool? e2e = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'body' when calling ModelApi->ModelTestStoriesPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "text/markdown"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (e2e != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "e2e", e2e))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<EvaluationStoriesResult>("/model/test/stories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTestStoriesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Evaluate stories Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>Task of EvaluationStoriesResult</returns>
        public async System.Threading.Tasks.Task<EvaluationStoriesResult> ModelTestStoriesPostAsync(string body, bool? e2e = null)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationStoriesResult> localVarResponse = await ModelTestStoriesPostAsyncWithHttpInfo(body, e2e);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Evaluate stories Evaluates one or multiple stories against the currently loaded Rasa model.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="e2e">Perform an end-to-end evaluation on the posted stories. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (EvaluationStoriesResult)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<EvaluationStoriesResult>> ModelTestStoriesPostAsyncWithHttpInfo(string body, bool? e2e = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'body' when calling ModelApi->ModelTestStoriesPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "text/markdown"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            if (e2e != null)
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "e2e", e2e))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<EvaluationStoriesResult>("/model/test/stories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTestStoriesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Train a Rasa model Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ModelTrainPost(TrainingRequest trainingRequest)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ModelTrainPostWithHttpInfo(trainingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train a Rasa model Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Vevro.Rasa.ApiClient.Client.ApiResponse<System.IO.Stream> ModelTrainPostWithHttpInfo(TrainingRequest trainingRequest)
        {
            // verify the required parameter 'trainingRequest' is set
            if (trainingRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'trainingRequest' when calling ModelApi->ModelTrainPost");

            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Vevro.Rasa.ApiClient.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = trainingRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<System.IO.Stream>("/model/train", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTrainPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Train a Rasa model Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ModelTrainPostAsync(TrainingRequest trainingRequest)
        {
            Vevro.Rasa.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ModelTrainPostAsyncWithHttpInfo(trainingRequest);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Train a Rasa model Trains a Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The trained model is not loaded by default.
        /// </summary>
        /// <exception cref="Vevro.Rasa.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trainingRequest"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Vevro.Rasa.ApiClient.Client.ApiResponse<System.IO.Stream>> ModelTrainPostAsyncWithHttpInfo(TrainingRequest trainingRequest)
        {
            // verify the required parameter 'trainingRequest' is set
            if (trainingRequest == null)
                throw new Vevro.Rasa.ApiClient.Client.ApiException(400, "Missing required parameter 'trainingRequest' when calling ModelApi->ModelTrainPost");


            Vevro.Rasa.ApiClient.Client.RequestOptions requestOptions = new Vevro.Rasa.ApiClient.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream",
                "application/json"
            };

            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);

            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);

            requestOptions.Data = trainingRequest;

            // authentication (JWT) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Vevro.Rasa.ApiClient.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (TokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                foreach (var kvp in Vevro.Rasa.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/model/train", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ModelTrainPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
